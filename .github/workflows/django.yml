name: Backend

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Debug enabled (~/.ssh/id_rsa)'
        required: false
        default: false
  push:
    branches: ['develop']
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - closed

jobs:
  run-prod-bare:
    if: github.repository == 'maxplanck-ie/parkour2'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and see that DEBUG is respected
        run: |
          make prod-ci

  install-per-wiki-instructions:
    if: github.repository == 'maxplanck-ie/parkour2'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Follow instructions
        run: |
          make
          make create-admin

  build-and-test:
    env:
      UV_SYSTEM_PYTHON: 1
    if: github.repository == 'maxplanck-ie/parkour2'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.10', 3.11, 3.12, 3.13]
    services:
      postgres:
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        image: postgres:latest
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - uses: actions/checkout@v4

      - name: Setup debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        timeout-minutes: 5
        with:
          detached: true
          limit-access-to-actor: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up UV for py ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "backend/requirements/${{ matrix.python-version }}/*.txt"
      
      - name: Install dependencies
        run: |
          uv pip install setuptools wheel  ## ModuleNotFoundError Py312 lacks pkg_resources
          uv pip install -r backend/requirements/${{ matrix.python-version }}/base.txt

      - name: Verify migrations
        env:
          DJANGO_SETTINGS_MODULE: wui.settings.prod
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/postgres
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python backend/manage.py makemigrations --no-input --check --dry-run


      - name: Validate templates
        env:
          DJANGO_SETTINGS_MODULE: wui.settings.prod
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/postgres
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python backend/manage.py validate_templates


      - name: Run unittests
        env:
          DJANGO_SETTINGS_MODULE: wui.settings.testing
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/postgres
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          uv pip install -r backend/requirements/${{ matrix.python-version }}/testing.txt
          python backend/manage.py test backend --parallel
